plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.hidetake.swagger.generator' version '2.19.2'
	id 'jacoco'
}


group = 'com.example.thuva'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

processResources {
	dependsOn(generateSwaggerCode)
}

swaggerSources {
	def typeMappings = 'URI=URI'
	def importMappings = 'URI=java.net.URI'
	eStore {
		def apiYaml = "${rootDir}/src/main/resources/api/openapi.yaml"
		def configJson = "${rootDir}/src/main/resources/api/config.json"
		inputFile = file(apiYaml)
		def ignoreFile = file("${rootDir}/src/main/resources/api/.openapi-generator-ignore")
		code {
			language = 'spring'
			configFile = file(configJson)
			rawOptions = ['--ignore-file-override', ignoreFile, '--type-mappings',
						  typeMappings, '--import-mappings', importMappings] as List<String>
			components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
			// dependsOn validation
		}
	}
}


compileJava.dependsOn swaggerSources.eStore.code
sourceSets.main.java.srcDir "${swaggerSources.eStore.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.eStore.code.outputDir}/src/main/resources"

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir("$buildDir/jacoco")
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(
					dir: it,
					exclude: [
							'com/example/thuva/api/model/*',
							'com/example/thuva/api/*Api.*',
							'com/example/thuva/api/security/UNUSED/*',
					])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.9
			}
		}
	}
}


repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

//sourceSets {    integrationTest {
//	java {
//		compileClasspath += main.output + test.output
//		runtimeClasspath += main.output + test.output
//		srcDir file('src/integration/java')
//	}
//	resources.srcDir file('src/integration/resources')
//}
//}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration/resources')
		}
		resources.srcDir file('src/integration/resources')
	}
}

tasks.register('integrationTest', Test) {
	useJUnitPlatform()
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dependencies {
	// OpenAPI Starts
	swaggerCodegen 'org.openapitools:openapi-generator-cli:6.2.1'
	compileOnly 'io.swagger:swagger-annotations:1.6.4'
	compileOnly 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.openapitools:jackson-databind-nullable:0.2.3'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	// required for schema in swagger generated code
	implementation 'io.springfox:springfox-oas:3.0.0'
	// OpenAPI Ends

	// Lombok Starts
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// Lombok Ends

	// DB Starts
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'com.h2database:h2'
	// DB Ends


	// Security Starts
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'com.auth0:java-jwt:4.3.0'
	// Security Ends

	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(jacocoTestReport)
}
